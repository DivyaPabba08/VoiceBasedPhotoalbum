AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: P1
Parameters:
  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String

  GitHubUser:
    Type: String

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket

  HW3Bucket1CF:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: "hw3-fall2020-photos-cf"

  HW3Bucket2CF:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: "s3codeformation-frontend" 

  # ElasticsearchDomain:
  #   Type: 'AWS::Elasticsearch::Domain'
  #   Properties:
  #     DomainName: "photo-es-zz2374"
  #     ElasticsearchVersion: '7.9'
  #     ElasticsearchClusterConfig:
  #       DedicatedMasterEnabled: 'false'
  #       InstanceCount: '2'
  #       ZoneAwarenessEnabled: 'true'
  #       InstanceType: "t3.small.elasticsearch"
  #     EBSOptions:
  #       EBSEnabled: true
  #       Iops: 0
  #       VolumeSize: 10
  #       VolumeType: "gp2"
  #     SnapshotOptions:
  #       AutomatedSnapshotStartHour: '0'
  #     AccessPolicies:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS: 'arn:aws:iam::176748515449:role/LF1_HW3_CP2_ROLE'
  #           Action: 'es:*'
  #           Resource: 'arn:aws:es:us-east-1:76748515449:domain/photo-es-zz2374/*'
  #     AdvancedOptions:
  #       rest.action.multi.allow_explicit_index: "true"

  LF1HW3CFYaml:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF1_HW3_CF
      Runtime: python3.8
      Role: 'arn:aws:iam::176748515449:role/LF1_HW3_CP2_ROLE'
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          from aws_requests_auth.aws_auth import AWSRequestsAuth
          from requests_aws4auth import AWS4Auth
          from elasticsearch import Elasticsearch, client, RequestsHttpConnection

          BUCKET_NAME = "hw3-fall2020-photos"

          def get_imgname(event):
              try:
                  return event['Records'][0]['s3']['object']['key']
              except IndexError as e:
                  raise e
                  
          # https://docs.aws.amazon.com/rekognition/latest/dg/labels-detect-labels-image.html
          def get_labels(imgname):
              rekognition = boto3.client('rekognition')
              resp = rekognition.detect_labels(Image={'S3Object':{'Bucket':BUCKET_NAME,
              'Name':imgname}}, MaxLabels=10)
              if not resp or not resp["Labels"]: print('### ERROR: NO LABEL FOUND ', resp)
              else: 
                  # detected object with bounds (dog, person, car, etc)
                  concrete = [l['Name'] for l in resp["Labels"] if l['Instances']]
                  # abstract class and background misc (mammal, vehicle, grass, etc)
                  abstract = [l['Name'] for l in resp["Labels"] if not l['Instances']]
                  return concrete+abstract
                  # return {'concrete': concrete, 'abstract': abstract, 'all': concrete+abstract}

          def lambda_handler(event, context):
              host = 'search-hw3-search-dl7wdgujatvmsve3akfrrxpqqq.us-east-1.es.amazonaws.com'
              region = 'us-east-1'
              service = 'es'
              credentials = boto3.Session().get_credentials()
              awsauth = AWS4Auth(credentials.access_key, credentials.secret_key, region, service, session_token=credentials.token)
              es = Elasticsearch(
                  hosts=[{'host':host, 'port':443}],
                  http_auth=awsauth,
                  use_ssl=True,
                  verify_certs=True,
                  connection_class=RequestsHttpConnection)
              createindexbody = {
                    "settings": {
                      "number_of_shards": 1
                    }
                  }
              indc = es.indices
              CreatedNewIndex = False
              if not es.indices.exists(index="searchphotos"):
                  indc.create('searchphotos', body=createindexbody)
                  CreatedNewIndex = True
              indc.open('searchphotos')
              
              for record in event['Records']:
                  imgname = get_imgname(event)
                  print(imgname)
                  labels=get_labels(imgname)
                  print(labels)
                  query={'objectKey':imgname,'bucket':BUCKET_NAME,'labels':labels}
                  data = json.dumps(query)
                  response = es.index('searchphotos', data, id=imgname)
                  print ("resp",response)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('OK')
              }
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active

  LF2HW3CFYaml:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF2_HW3_CF
      Runtime: python3.8
      Role: 'arn:aws:iam::176748515449:role/LF1_HW3_CP2_ROLE'
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import math
          import dateutil.parser
          import datetime
          import time
          import os
          import logging
          import boto3
          import json
          from requests_aws4auth import AWS4Auth
          from elasticsearch import Elasticsearch, client, RequestsHttpConnection

          def initialize_elastic():
              host = 'search-hw3-search-dl7wdgujatvmsve3akfrrxpqqq.us-east-1.es.amazonaws.com'
              region = 'us-east-1'
              service = 'es'
              credentials = boto3.Session().get_credentials()
              awsauth = AWS4Auth(credentials.access_key, credentials.secret_key, region, service, session_token=credentials.token)
              es = Elasticsearch(hosts=[{'host':host, 'port':443}],
                                http_auth=awsauth,
                                use_ssl=True,
                                verify_certs=True,
                                connection_class=RequestsHttpConnection)
              return es

          def searchPhotos(keywords):
              res = []
              es = initialize_elastic()
              for kw in keywords:
                  response = es.search(index="searchphotos",
                      body={
                          "query": {
                              "match": {
                                  "labels": kw
                              }
                          }
                      }
                  )
                  print('#############', response)
                  hits = response['hits']['hits']
                  if not hits:
                      print('######### No match found for ', kw)
                      continue
                  newphotos = [h['_id'] for h in hits if h['_id'] not in res]
                  if newphotos: res.append(newphotos[0])
                  else: res.append(hits[0]['_id'])
              res = ["https://hw3-fall2020-photos.s3.amazonaws.com/" + p for p in res]
              # res.append("https://hw3-fall2020-photos.s3.amazonaws.com/dog.jpg")
              # res.append("https://hw3-fall2020-photos.s3.amazonaws.com/ice.jpg")
              return res

          def get_slots(lex_response):
              slots_dict = lex_response['slots']
              results = []
              for key in slots_dict.keys():
                  result = slots_dict[key]
                  if result:
                      results.append(result)
              return results

          def sendToLex(message):
              client = boto3.client('lex-runtime')
              response = client.post_text(
                  botName="SearchBot",
                  botAlias="SearchAlias",
                  userId='176748515449',
                  inputText= message)
              return response
              
          def lambda_handler(event, context):
              message = event["queryStringParameters"]["q"]
              # message = event['message']
              print(message)
              response = sendToLex(message)
              # return(json.dumps(response))
              intent_name = response['intentName']
              categories = None
              if intent_name == 'SearchIntent':
                  categories = get_slots(response)
                  print(categories) #[cats, dogs]
              else:
                  print('Intent with name ' + intent_name + ' not supported')
              photos = []
              if categories: photos = searchPhotos(categories)
              return {
                  'headers': {
                      "Access-Control-Allow-Headers" : "Content-Type",
                      "Access-Control-Allow-Origin": "*",
                      "Access-Control-Allow-Methods": "OPTIONS,GET,POST"
                  },
                  'statusCode': 200,
                  'body': json.dumps(photos)
              }
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active    

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application from cloudformation"
          version: "1.0.0"
          title: "AI Photo Search CF"
        host: "qjkjqh26ol.execute-api.us-east-1.amazonaws.com"
        basePath: "/V0"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:176748515449:function:LF2-search/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

      Name: AIPhotoSearchCF
      Parameters:
        endpointConfigurationTypes: REGIONAL
  ClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - echo Installing packages for client
            build:
              commands:
                - echo Building client
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:8.11.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}-build-client
      ServiceRole: 'arn:aws:iam::176748515449:role/service-role/codebuild-LambdaCDDemoProject-service-role'

  # DeployClientBuildProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Artifacts:
  #       Type: "CODEPIPELINE"
  #     Source:
  #       Type: "CODEPIPELINE"
  #       BuildSpec: |
  #         version: 0.1
  #         phases:
  #           build:
  #             commands:
  #               - echo Deploying client to S3
  #               - cd ./build && aws s3 cp . s3://$S3_CLIENT_BUCKET --recursive > deploymentResult.txt
  #         artifacts:
  #           files: build/deploymentResult.txt
  #     Environment:
  #       ComputeType: "BUILD_GENERAL1_SMALL"
  #       Image: "aws/codebuild/nodejs:6.3.1"
  #       Type: "LINUX_CONTAINER"
  #       EnvironmentVariables:
  #         - Name: AWS_DEFAULT_REGION
  #           Value: !Ref AWS::Region
  #         - Name: S3_CLIENT_BUCKET
  #           Value: !Ref ClientBucket
  #     Name: !Sub ${AWS::StackName}-deploy-client
  #     ServiceRole: 'arn:aws:iam::176748515449:role/CloudFormationServiceRole'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: 'arn:aws:iam::176748515449:role/service-role/AWSCodePipelineServiceRole-us-east-1-HW3LambdaCodePipeLine'
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ClientBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: ClientBuild
              RunOrder: 1
        # - Name: Deploy
        #   Actions:
        #     - Name: ClientDeployStep
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: 1
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref DeployClientBuildProject
        #       InputArtifacts:
        #         - Name: ClientBuild
        #       OutputArtifacts:
        #         - Name: ClientDeploymentOutput
        #       RunOrder: 1
